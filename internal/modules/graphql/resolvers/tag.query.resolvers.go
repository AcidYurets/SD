package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"calend/internal/modules/domain/tag/dto"
	"context"
)

// TagCreate is the resolver for the TagCreate field.
func (r *mutationResolver) TagCreate(ctx context.Context, tag dto.CreateTag) (*dto.Tag, error) {
	createdTag, err := r.tagService.Create(ctx, &tag)
	if err != nil {
		return nil, err
	}

	return createdTag, nil
}

// TagUpdate is the resolver for the TagUpdate field.
func (r *mutationResolver) TagUpdate(ctx context.Context, id string, tag dto.UpdateTag) (*dto.Tag, error) {
	updTag, err := r.tagService.Update(ctx, id, &tag)
	if err != nil {
		return nil, err
	}

	return updTag, nil
}

// TagDelete is the resolver for the TagDelete field.
func (r *mutationResolver) TagDelete(ctx context.Context, id string) (string, error) {
	err := r.tagService.Delete(ctx, id)
	if err != nil {
		return "", err
	}

	return id, nil
}

// TagRestore is the resolver for the TagRestore field.
func (r *mutationResolver) TagRestore(ctx context.Context, id string) (*dto.Tag, error) {
	tag, err := r.tagService.Restore(ctx, id)
	if err != nil {
		return nil, err
	}

	return tag, nil
}

// Tag is the resolver for the Tag field.
func (r *queryResolver) Tag(ctx context.Context, id string) (*dto.Tag, error) {
	tag, err := r.tagService.GetByUuid(ctx, id)
	if err != nil {
		return nil, err
	}

	return tag, nil
}

// Tags is the resolver for the Tags field.
func (r *queryResolver) Tags(ctx context.Context) ([]*dto.Tag, error) {
	tags, err := r.tagService.List(ctx)
	if err != nil {
		return nil, err
	}

	return tags, nil
}
