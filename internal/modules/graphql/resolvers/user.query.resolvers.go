package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"calend/internal/models/roles"
	"calend/internal/models/session"
	"calend/internal/modules/domain/user/dto"
	"context"
)

// UserUpdateSelf is the resolver for the UserUpdateSelf field.
func (r *mutationResolver) UserUpdateSelf(ctx context.Context, updateUser dto.UpdateUser) (*dto.User, error) {
	userUuid, err := session.GetUserUuidFromCtx(ctx)
	if err != nil {
		return nil, err
	}

	user, err := r.userService.Update(ctx, userUuid, &updateUser)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// UserUpdate is the resolver for the UserUpdate field.
func (r *mutationResolver) UserUpdate(ctx context.Context, id string, updateUser dto.UpdateUser) (*dto.User, error) {
	user, err := r.userService.Update(ctx, id, &updateUser)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// UserDelete is the resolver for the UserDelete field.
func (r *mutationResolver) UserDelete(ctx context.Context, id string) (string, error) {
	err := r.userService.Delete(ctx, id)
	if err != nil {
		return "", err
	}

	return id, nil
}

// UserChangeRole is the resolver for the UserChangeRole field.
func (r *mutationResolver) UserChangeRole(ctx context.Context, id string, newRole roles.Type) (*dto.User, error) {
	user, err := r.userService.ChangeRole(ctx, id, newRole)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// User is the resolver for the User field.
func (r *queryResolver) User(ctx context.Context, id string) (*dto.User, error) {
	user, err := r.userService.GetByUuid(ctx, id)

	return user, err
}

// Users is the resolver for the Users field.
func (r *queryResolver) Users(ctx context.Context) ([]*dto.User, error) {
	users, err := r.userService.List(ctx)
	if err != nil {
		return nil, err
	}

	return users, nil
}
