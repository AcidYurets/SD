// Code generated by ent, DO NOT EDIT.

package invitation

const (
	// Label holds the string label denoting the invitation type in the database.
	Label = "invitation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldUserUUID holds the string denoting the user_uuid field in the database.
	FieldUserUUID = "user_uuid"
	// FieldEventUUID holds the string denoting the event_uuid field in the database.
	FieldEventUUID = "event_uuid"
	// FieldAccessRightCode holds the string denoting the access_right_code field in the database.
	FieldAccessRightCode = "access_right_code"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeAccessRight holds the string denoting the access_right edge name in mutations.
	EdgeAccessRight = "access_right"
	// AccessRightFieldID holds the string denoting the ID field of the AccessRight.
	AccessRightFieldID = "code"
	// Table holds the table name of the invitation in the database.
	Table = "invitations"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "invitations"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_uuid"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "invitations"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_uuid"
	// AccessRightTable is the table that holds the access_right relation/edge.
	AccessRightTable = "invitations"
	// AccessRightInverseTable is the table name for the AccessRight entity.
	// It exists in this package in order to avoid circular dependency with the "accessright" package.
	AccessRightInverseTable = "access_rights"
	// AccessRightColumn is the table column denoting the access_right relation/edge.
	AccessRightColumn = "access_right_code"
)

// Columns holds all SQL columns for invitation fields.
var Columns = []string{
	FieldID,
	FieldUserUUID,
	FieldEventUUID,
	FieldAccessRightCode,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)
