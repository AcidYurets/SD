// Code generated by ent, DO NOT EDIT.

package ent

import "entgo.io/ent/dialect"

// Возвращает используемый драйвер
func (ar *AccessRightQuery) Driver() dialect.Driver {
	return ar.driver
}

// Устанавливает новый драйвер
func (ar *AccessRightQuery) SetDriver(newDrv dialect.Driver) {
	ar.driver = newDrv
}

// Возвращает используемый драйвер
func (ar *AccessRightMutation) Driver() dialect.Driver {
	return ar.driver
}

// Устанавливает новый драйвер
func (ar *AccessRightMutation) SetDriver(newDrv dialect.Driver) {
	ar.driver = newDrv
}

// Возвращает используемый драйвер
func (e *EventQuery) Driver() dialect.Driver {
	return e.driver
}

// Устанавливает новый драйвер
func (e *EventQuery) SetDriver(newDrv dialect.Driver) {
	e.driver = newDrv
}

// Возвращает используемый драйвер
func (e *EventMutation) Driver() dialect.Driver {
	return e.driver
}

// Устанавливает новый драйвер
func (e *EventMutation) SetDriver(newDrv dialect.Driver) {
	e.driver = newDrv
}

// Возвращает используемый драйвер
func (i *InvitationQuery) Driver() dialect.Driver {
	return i.driver
}

// Устанавливает новый драйвер
func (i *InvitationQuery) SetDriver(newDrv dialect.Driver) {
	i.driver = newDrv
}

// Возвращает используемый драйвер
func (i *InvitationMutation) Driver() dialect.Driver {
	return i.driver
}

// Устанавливает новый драйвер
func (i *InvitationMutation) SetDriver(newDrv dialect.Driver) {
	i.driver = newDrv
}

// Возвращает используемый драйвер
func (t *TagQuery) Driver() dialect.Driver {
	return t.driver
}

// Устанавливает новый драйвер
func (t *TagQuery) SetDriver(newDrv dialect.Driver) {
	t.driver = newDrv
}

// Возвращает используемый драйвер
func (t *TagMutation) Driver() dialect.Driver {
	return t.driver
}

// Устанавливает новый драйвер
func (t *TagMutation) SetDriver(newDrv dialect.Driver) {
	t.driver = newDrv
}

// Возвращает используемый драйвер
func (u *UserQuery) Driver() dialect.Driver {
	return u.driver
}

// Устанавливает новый драйвер
func (u *UserQuery) SetDriver(newDrv dialect.Driver) {
	u.driver = newDrv
}

// Возвращает используемый драйвер
func (u *UserMutation) Driver() dialect.Driver {
	return u.driver
}

// Устанавливает новый драйвер
func (u *UserMutation) SetDriver(newDrv dialect.Driver) {
	u.driver = newDrv
}
