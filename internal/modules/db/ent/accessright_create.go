// Code generated by ent, DO NOT EDIT.

package ent

import (
	"calend/internal/models/access"
	"calend/internal/modules/db/ent/accessright"
	"calend/internal/modules/db/ent/invitation"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccessRightCreate is the builder for creating a AccessRight entity.
type AccessRightCreate struct {
	config
	mutation *AccessRightMutation
	hooks    []Hook
}

// SetDescription sets the "description" field.
func (arc *AccessRightCreate) SetDescription(s string) *AccessRightCreate {
	arc.mutation.SetDescription(s)
	return arc
}

// SetID sets the "id" field.
func (arc *AccessRightCreate) SetID(a access.Type) *AccessRightCreate {
	arc.mutation.SetID(a)
	return arc
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (arc *AccessRightCreate) AddInvitationIDs(ids ...string) *AccessRightCreate {
	arc.mutation.AddInvitationIDs(ids...)
	return arc
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (arc *AccessRightCreate) AddInvitations(i ...*Invitation) *AccessRightCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return arc.AddInvitationIDs(ids...)
}

// Mutation returns the AccessRightMutation object of the builder.
func (arc *AccessRightCreate) Mutation() *AccessRightMutation {
	return arc.mutation
}

// Save creates the AccessRight in the database.
func (arc *AccessRightCreate) Save(ctx context.Context) (*AccessRight, error) {
	return withHooks[*AccessRight, AccessRightMutation](ctx, arc.sqlSave, arc.mutation, arc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AccessRightCreate) SaveX(ctx context.Context) *AccessRight {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *AccessRightCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *AccessRightCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *AccessRightCreate) check() error {
	if _, ok := arc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "AccessRight.description"`)}
	}
	return nil
}

func (arc *AccessRightCreate) sqlSave(ctx context.Context) (*AccessRight, error) {
	if err := arc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(access.Type); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AccessRight.ID type: %T", _spec.ID.Value)
		}
	}
	arc.mutation.id = &_node.ID
	arc.mutation.done = true
	return _node, nil
}

func (arc *AccessRightCreate) createSpec() (*AccessRight, *sqlgraph.CreateSpec) {
	var (
		_node = &AccessRight{config: arc.config}
		_spec = sqlgraph.NewCreateSpec(accessright.Table, sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString))
	)
	if id, ok := arc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := arc.mutation.Description(); ok {
		_spec.SetField(accessright.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := arc.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accessright.InvitationsTable,
			Columns: []string{accessright.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccessRightCreateBulk is the builder for creating many AccessRight entities in bulk.
type AccessRightCreateBulk struct {
	config
	builders []*AccessRightCreate
}

// Save creates the AccessRight entities in the database.
func (arcb *AccessRightCreateBulk) Save(ctx context.Context) ([]*AccessRight, error) {
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AccessRight, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessRightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AccessRightCreateBulk) SaveX(ctx context.Context) []*AccessRight {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *AccessRightCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *AccessRightCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}
