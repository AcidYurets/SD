// Code generated by ent, DO NOT EDIT.

package ent

import (
	"calend/internal/modules/db/ent/accessright"
	"calend/internal/modules/db/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccessRightDelete is the builder for deleting a AccessRight entity.
type AccessRightDelete struct {
	config
	hooks    []Hook
	mutation *AccessRightMutation
}

// Where appends a list predicates to the AccessRightDelete builder.
func (ard *AccessRightDelete) Where(ps ...predicate.AccessRight) *AccessRightDelete {
	ard.mutation.Where(ps...)
	return ard
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ard *AccessRightDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, AccessRightMutation](ctx, ard.sqlExec, ard.mutation, ard.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ard *AccessRightDelete) ExecX(ctx context.Context) int {
	n, err := ard.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ard *AccessRightDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(accessright.Table, sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeInt))
	if ps := ard.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ard.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ard.mutation.done = true
	return affected, err
}

// AccessRightDeleteOne is the builder for deleting a single AccessRight entity.
type AccessRightDeleteOne struct {
	ard *AccessRightDelete
}

// Where appends a list predicates to the AccessRightDelete builder.
func (ardo *AccessRightDeleteOne) Where(ps ...predicate.AccessRight) *AccessRightDeleteOne {
	ardo.ard.mutation.Where(ps...)
	return ardo
}

// Exec executes the deletion query.
func (ardo *AccessRightDeleteOne) Exec(ctx context.Context) error {
	n, err := ardo.ard.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{accessright.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ardo *AccessRightDeleteOne) ExecX(ctx context.Context) {
	if err := ardo.Exec(ctx); err != nil {
		panic(err)
	}
}
