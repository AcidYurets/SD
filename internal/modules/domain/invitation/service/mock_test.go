// Code generated by MockGen. DO NOT EDIT.
// Source: calend/internal/modules/domain/invitation/service (interfaces: IInvitationRepo)

// Package service is a generated GoMock package.
package service

import (
	dto "calend/internal/modules/domain/invitation/dto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIInvitationRepo is a mock of IInvitationRepo interface.
type MockIInvitationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIInvitationRepoMockRecorder
}

// MockIInvitationRepoMockRecorder is the mock recorder for MockIInvitationRepo.
type MockIInvitationRepoMockRecorder struct {
	mock *MockIInvitationRepo
}

// NewMockIInvitationRepo creates a new mock instance.
func NewMockIInvitationRepo(ctrl *gomock.Controller) *MockIInvitationRepo {
	mock := &MockIInvitationRepo{ctrl: ctrl}
	mock.recorder = &MockIInvitationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInvitationRepo) EXPECT() *MockIInvitationRepoMockRecorder {
	return m.recorder
}

// CreateBulk mocks base method.
func (m *MockIInvitationRepo) CreateBulk(arg0 context.Context, arg1 dto.CreateInvitations) (dto.Invitations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBulk", arg0, arg1)
	ret0, _ := ret[0].(dto.Invitations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBulk indicates an expected call of CreateBulk.
func (mr *MockIInvitationRepoMockRecorder) CreateBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulk", reflect.TypeOf((*MockIInvitationRepo)(nil).CreateBulk), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIInvitationRepo) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIInvitationRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIInvitationRepo)(nil).Delete), arg0, arg1)
}

// GetByUuid mocks base method.
func (m *MockIInvitationRepo) GetByUuid(arg0 context.Context, arg1 string) (*dto.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUuid", arg0, arg1)
	ret0, _ := ret[0].(*dto.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUuid indicates an expected call of GetByUuid.
func (mr *MockIInvitationRepoMockRecorder) GetByUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUuid", reflect.TypeOf((*MockIInvitationRepo)(nil).GetByUuid), arg0, arg1)
}

// List mocks base method.
func (m *MockIInvitationRepo) List(arg0 context.Context) (dto.Invitations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(dto.Invitations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIInvitationRepoMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIInvitationRepo)(nil).List), arg0)
}

// ListByUserUuid mocks base method.
func (m *MockIInvitationRepo) ListByUserUuid(arg0 context.Context, arg1 string) (dto.Invitations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserUuid", arg0, arg1)
	ret0, _ := ret[0].(dto.Invitations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserUuid indicates an expected call of ListByUserUuid.
func (mr *MockIInvitationRepoMockRecorder) ListByUserUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserUuid", reflect.TypeOf((*MockIInvitationRepo)(nil).ListByUserUuid), arg0, arg1)
}

// Update mocks base method.
func (m *MockIInvitationRepo) Update(arg0 context.Context, arg1 string, arg2 *dto.UpdateInvitation) (*dto.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dto.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIInvitationRepoMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIInvitationRepo)(nil).Update), arg0, arg1, arg2)
}
