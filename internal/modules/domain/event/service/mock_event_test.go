// Code generated by MockGen. DO NOT EDIT.
// Source: calend/internal/modules/domain/event/service (interfaces: IEventRepo)

// Package service is a generated GoMock package.
package service

import (
	dto "calend/internal/modules/domain/event/dto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIEventRepo is a mock of IEventRepo interface.
type MockIEventRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIEventRepoMockRecorder
}

// MockIEventRepoMockRecorder is the mock recorder for MockIEventRepo.
type MockIEventRepoMockRecorder struct {
	mock *MockIEventRepo
}

// NewMockIEventRepo creates a new mock instance.
func NewMockIEventRepo(ctrl *gomock.Controller) *MockIEventRepo {
	mock := &MockIEventRepo{ctrl: ctrl}
	mock.recorder = &MockIEventRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEventRepo) EXPECT() *MockIEventRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIEventRepo) Create(arg0 context.Context, arg1 *dto.CreateEvent) (*dto.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*dto.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIEventRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIEventRepo)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIEventRepo) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIEventRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIEventRepo)(nil).Delete), arg0, arg1)
}

// GetByUuid mocks base method.
func (m *MockIEventRepo) GetByUuid(arg0 context.Context, arg1 string) (*dto.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUuid", arg0, arg1)
	ret0, _ := ret[0].(*dto.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUuid indicates an expected call of GetByUuid.
func (mr *MockIEventRepoMockRecorder) GetByUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUuid", reflect.TypeOf((*MockIEventRepo)(nil).GetByUuid), arg0, arg1)
}

// ListAvailable mocks base method.
func (m *MockIEventRepo) ListAvailable(arg0 context.Context, arg1 string) (dto.Events, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailable", arg0, arg1)
	ret0, _ := ret[0].(dto.Events)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailable indicates an expected call of ListAvailable.
func (mr *MockIEventRepoMockRecorder) ListAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailable", reflect.TypeOf((*MockIEventRepo)(nil).ListAvailable), arg0, arg1)
}

// Update mocks base method.
func (m *MockIEventRepo) Update(arg0 context.Context, arg1 string, arg2 *dto.UpdateEvent) (*dto.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dto.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIEventRepoMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIEventRepo)(nil).Update), arg0, arg1, arg2)
}
