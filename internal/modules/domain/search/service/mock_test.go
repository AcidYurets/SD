// Code generated by MockGen. DO NOT EDIT.
// Source: calend/internal/modules/domain/search/service (interfaces: ISearchRepo)

// Package service is a generated GoMock package.
package service

import (
	dto "calend/internal/modules/domain/event/dto"
	dto0 "calend/internal/modules/domain/search/dto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISearchRepo is a mock of ISearchRepo interface.
type MockISearchRepo struct {
	ctrl     *gomock.Controller
	recorder *MockISearchRepoMockRecorder
}

// MockISearchRepoMockRecorder is the mock recorder for MockISearchRepo.
type MockISearchRepoMockRecorder struct {
	mock *MockISearchRepo
}

// NewMockISearchRepo creates a new mock instance.
func NewMockISearchRepo(ctrl *gomock.Controller) *MockISearchRepo {
	mock := &MockISearchRepo{ctrl: ctrl}
	mock.recorder = &MockISearchRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISearchRepo) EXPECT() *MockISearchRepoMockRecorder {
	return m.recorder
}

// SearchEvents mocks base method.
func (m *MockISearchRepo) SearchEvents(arg0 context.Context, arg1 *dto0.EventSearchRequest) (dto.Events, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEvents", arg0, arg1)
	ret0, _ := ret[0].(dto.Events)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEvents indicates an expected call of SearchEvents.
func (mr *MockISearchRepoMockRecorder) SearchEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEvents", reflect.TypeOf((*MockISearchRepo)(nil).SearchEvents), arg0, arg1)
}
